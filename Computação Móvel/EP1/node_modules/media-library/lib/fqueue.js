(function() {
  var EventEmitter, FQueue, async,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  async = require('async');

  FQueue = (function(superClass) {
    extend(FQueue, superClass);

    function FQueue(options) {
      var concurrency;
      if (options == null) {
        options = {};
      }
      if (!(this instanceof FQueue)) {
        return new FQueue(options);
      }
      this.options = options;
      concurrency = options.concurrency || 1;
      this._queue = async.queue(this._process.bind(this), concurrency);
      this._queue.drain = this._drain.bind(this);
    }

    FQueue.prototype._process = function(arg, callback) {
      var args, func;
      func = arg.func, args = arg.args;
      return func.apply(null, slice.call(args).concat([callback]));
    };

    FQueue.prototype._drain = function() {
      return this.emit('done');
    };

    FQueue.prototype.push = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this._queue).push.apply(ref, args);
    };

    FQueue.prototype.unshift = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this._queue).unshift.apply(ref, args);
    };

    FQueue.prototype.pause = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this._queue).pause.apply(ref, args);
    };

    FQueue.prototype.resume = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this._queue).resume.apply(ref, args);
    };

    return FQueue;

  })(EventEmitter);

  module.exports = FQueue;

}).call(this);
