{ EventEmitter } = require 'events'
async = require 'async'

class FQueue extends EventEmitter
  constructor: (options = {}) ->
    if this not instanceof FQueue
      return new FQueue(options)

    @options = options
    concurrency = options.concurrency || 1
    this._queue = async.queue(this._process.bind(this), concurrency)
    this._queue.drain = this._drain.bind(this)

  _process: ({ func, args }, callback) ->
    func.apply(null, [args..., callback])

  _drain: -> @emit('done')

  push: (args...) -> this._queue.push(args...)

  unshift: (args...) -> this._queue.unshift(args...)

  pause: (args...) -> this._queue.pause(args...)

  resume: (args...) -> this._queue.resume(args...)

module.exports = FQueue
